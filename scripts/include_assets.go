package main

import (
	"io"
	"io/ioutil"
	"log"
	"os"
	"strings"
)

func copyAsset(in os.FileInfo, out io.Writer) {
	if in.Name() == "assets.go" {
		return // we do not want to include the assets file itself
	}
	_, err := out.Write([]byte(strings.Title(strings.Replace(in.Name(), ".", "", -1)) + " = `"))
	if err != nil {
		log.Fatalf("Error writing to assets file: %s", err)
	}
	var inf *os.File
	inf, err = os.Open("gen/" + in.Name())
	if err != nil {
		log.Fatalf("Error opening input file %s: %s", in.Name(), err)
	}

	_, err = io.Copy(out, inf)
	if err != nil {
		log.Fatalf("Error writing to assets file: %s", err)
	}
	_, err = out.Write([]byte("`\n"))
	if err != nil {
		log.Fatalf("Error writing to assets file: %s", err)
	}
	err = inf.Close()
	if err != nil {
		log.Fatalf("Error closing input file %s: %s", in.Name(), err)
	}
}

// Reads all files in the 'gen' folder and encodes them as strings literals
// in assets/assets.go.
func main() {
	fs, _ := ioutil.ReadDir("gen/")
	out, _ := os.Create("assets/assets.go")
	defer func() {
		err := out.Close()
		if err != nil {
			log.Printf("Error closing assets file: %s", err)
		}
	}()

	_, err := out.Write([]byte("// Code generated by include_assets.go. DO NOT EDIT.\n\n"))
	if err != nil {
		log.Fatalf("Error writing to assets file: %s", err)
	}

	_, err = out.Write([]byte("package assets \n\nvar (\n"))
	if err != nil {
		log.Fatalf("Error writing to assets file: %s", err)
	}

	for _, f := range fs {
		copyAsset(f, out)
	}
	_, err = out.Write([]byte(")\n"))
	if err != nil {
		log.Fatalf("Error writing to assets file: %s", err)
	}
}
